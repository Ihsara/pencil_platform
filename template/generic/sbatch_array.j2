#!/bin/bash
#SBATCH --job-name={{ sbatch.job_name }}
#SBATCH --account={{ sbatch.account }}
#SBATCH --partition={{ sbatch.partition }}
#SBATCH --time={{ sbatch.time }}
#SBATCH --nodes={{ sbatch.nodes }}
#SBATCH --ntasks={{ sbatch.ntasks }}
#SBATCH --cpus-per-task={{ sbatch.cpus_per_task }}
#SBATCH --array=1-{{ num_jobs }}
#SBATCH --output={{ run_base_dir }}/slurm_logs/output_%A_%a.txt
#SBATCH --error={{ run_base_dir }}/slurm_logs/errors_%A_%a.txt
{% if sbatch.mail_user %}
#SBATCH --mail-user={{ sbatch.mail_user }}
#SBATCH --mail-type={{ sbatch.mail_type | default('FAIL') }}
{% endif %}

set -e

# --- Debug Information ---
echo "--- SLURM ENVIRONMENT ---"
echo "Job ID: ${SLURM_JOB_ID}"
echo "Array Task ID: ${SLURM_ARRAY_TASK_ID}"
echo "Submission Directory: ${SLURM_SUBMIT_DIR}"
echo "Hostname: $(hostname)"
echo "-------------------------"

# --- PRE-FLIGHT CHECK: Ensure dependency directories exist ---
# The Pencil Code's 'start.csh' script requires a 'data' directory
# to exist in the submission directory to write a jobid.dat file.
# We create it here to prevent the job from failing. The -p flag
# ensures it doesn't fail if the directory already exists.
echo "INFO: Ensuring dependency directory exists: ${SLURM_SUBMIT_DIR}/data"
mkdir -p "${SLURM_SUBMIT_DIR}/data"

# --- Path Definitions ---
MANIFEST_FILE="${SLURM_SUBMIT_DIR}/runs/{{ experiment_name }}/{{ manifest_file }}"

if [ ! -f "$MANIFEST_FILE" ]; then
    echo "FATAL ERROR: Manifest file not found at ${MANIFEST_FILE}" >&2
    exit 1
fi

RUN_NAME=$(sed -n "${SLURM_ARRAY_TASK_ID}p" "$MANIFEST_FILE")
if [ -z "$RUN_NAME" ]; then
    echo "FATAL ERROR: Could not read RUN_NAME from manifest for task ID ${SLURM_ARRAY_TASK_ID}" >&2
    exit 1
fi

SOURCE_BASE_DIR="{{ hpc.source_base_dir }}"
RUN_BASE_DIR="{{ hpc.run_base_dir }}"
RUN_DIR="${RUN_BASE_DIR}/${RUN_NAME}"
LOCAL_GENERATED_CONFIG_DIR="${SLURM_SUBMIT_DIR}/runs/{{ experiment_name }}/generated_configs/${RUN_NAME}"
LOGFILE="${RUN_DIR}/simulation.log"

# --- Setup submission logging directory ---
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M")
SUBMISSION_LOG_BASE="${SLURM_SUBMIT_DIR}/logs/submission/${TIMESTAMP}/{{ sbatch.job_name }}_${SLURM_JOB_ID}/array_${SLURM_ARRAY_TASK_ID}"
mkdir -p "${SUBMISSION_LOG_BASE}"

PC_BUILD_LOG="${SUBMISSION_LOG_BASE}/pc_build.log"
PC_START_LOG="${SUBMISSION_LOG_BASE}/pc_start.log"
PC_RUN_LOG="${SUBMISSION_LOG_BASE}/pc_run.log"

echo "INFO: Starting SLURM task ${SLURM_ARRAY_TASK_ID} for run: ${RUN_NAME}"
echo "INFO: Submission logs will be stored in: ${SUBMISSION_LOG_BASE}"

# --- 1. Clean up existing run directory if it exists ---
if [ -d "${RUN_DIR}" ]; then
    echo "INFO: Removing existing run directory: ${RUN_DIR}"
    rm -rf "${RUN_DIR}"
fi

# --- 2. Setup the Run Directory ---
{% if rebuild %}
echo "INFO: REBUILD MODE: Setting up a full copy of the run directory."
pc_newrun "${SOURCE_BASE_DIR}" "${RUN_DIR}"
{% else %}
echo "INFO: Setting up symbolic-linked run directory."
pc_newrun -s "${SOURCE_BASE_DIR}" "${RUN_DIR}"
{% endif %}


# --- 3. Copy Generated Configs ---
echo "INFO: Copying generated config files from ${LOCAL_GENERATED_CONFIG_DIR}"
cp -rv "${LOCAL_GENERATED_CONFIG_DIR}"/* "${RUN_DIR}/"

# --- 4. Navigate and Execute ---
echo "INFO: Changing to working directory: ${RUN_DIR}"
cd "$RUN_DIR" || { echo "FATAL ERROR: Could not cd to ${RUN_DIR}"; exit 1; }
echo "INFO: Starting simulation run..." > $LOGFILE

# --- 5. Build Step (only if rebuilding) ---
{% if rebuild %}
echo "INFO: REBUILD MODE: Loading modules and building executable..." >> $LOGFILE 2>&1
# Source the module system initializer
source /usr/share/lmod/lmod/init/bash
module purge
{{ module_loads | indent(0) }}

# Build the code, cleaning previous artifacts first
echo "INFO: Running pc_build --cleanall..." | tee -a $LOGFILE
pc_build --cleanall >> "${PC_BUILD_LOG}" 2>&1
echo "INFO: Running pc_build..." | tee -a $LOGFILE
pc_build >> "${PC_BUILD_LOG}" 2>&1
if [ $? -ne 0 ]; then echo "ERROR: pc_build failed. Check ${PC_BUILD_LOG}" | tee -a $LOGFILE >&2; exit 1; fi
echo "INFO: Build finished. Full output in ${PC_BUILD_LOG}" | tee -a $LOGFILE
{% endif %}

# --- 6. Run the simulation ---
if [ ! -e data/param.nml ]; then
    echo "INFO: Running START..." | tee -a $LOGFILE
    srun ./start.csh >> "${PC_START_LOG}" 2>&1
    if [ $? -ne 0 ]; then echo "ERROR: start.csh failed. Check ${PC_START_LOG}" | tee -a $LOGFILE >&2; exit 1; fi
    echo "INFO: START finished. Full output in ${PC_START_LOG}" | tee -a $LOGFILE
else
    echo "INFO: Skipping START (data/param.nml exists)." | tee -a $LOGFILE
fi

echo "INFO: Running RUN..." | tee -a $LOGFILE
srun ./run.csh >> "${PC_RUN_LOG}" 2>&1
if [ $? -ne 0 ]; then echo "ERROR: run.csh failed. Check ${PC_RUN_LOG}" | tee -a $LOGFILE >&2; exit 1; fi
echo "INFO: RUN finished successfully. Full output in ${PC_RUN_LOG}" | tee -a $LOGFILE

echo "INFO: SLURM task finished successfully."
